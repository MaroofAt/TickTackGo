"""
Django settings for ticktackgo project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(BASE_DIR / '.env')

BASE_URL = os.getenv('BASE_URL' , 'http://127.0.0.1:8000')

FERNET_KEY = os.getenv('FERNET_KEY' , '')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY' , '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG' , '')

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'superformidable-vicente-unvitreous.ngrok-free.dev',
    'tawana-tritheistical-nonconcordantly.ngrok-free.dev'
]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173", # REACT + VITE
]
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #installed
    'rest_framework',
    'dotenv',
    'django_extensions',
    'social_django',
    'drf_spectacular',
    'django_filters',
    'corsheaders',

    #own
    'users',
    'workspaces',
    'projects',
    'tasks',

    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ticktackgo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ticktackgo.wsgi.application'


REST_FRAMEWORK= {
    'DEFAULT_AUTHENTICATION_CLASSES': (  
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    'USER_ID_FIELD': 'id',        # Model field to use as user identifier
    'USER_ID_CLAIM': 'user_id',   # Default claim name in token payload
    # 'TOKEN_OBTAIN_SERIALIZER': 'users.serializers.CustomTokenObtainPairSerializer', # handle email as username
}

# Redirect URL after successful login
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/auth/success/' # Custom success endpoint
# Pipeline to associate users by email
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',       # Fetch user details (email, name)
    'social_core.pipeline.social_auth.social_uid',           # Get unique ID from provider
    'social_core.pipeline.social_auth.auth_allowed',         # Check if auth is allowed
    'social_core.pipeline.social_auth.social_user',          # Check if user exists in DB
    'users.pipeline.block_existing_emails',                  # Don't Allow user to use the same email in two different ways to register
    'social_core.pipeline.user.get_username',                # Generate username
    'social_core.pipeline.user.create_user',                 # Create user if doesn't exist
    'users.pipeline.save_extra_data_from_state',             # Save the extra data from state (save_extra_data_from_state, how_did_you_get_here, what_do_you_do)
    'social_core.pipeline.social_auth.associate_user',       # Link social account to user
    'social_core.pipeline.social_auth.load_extra_data',      # Save extra data (e.g., profile picture)
)
SOCIAL_AUTH_ASSOCIATE_BY_EMAIL = False
SOCIAL_AUTH_RAISE_EXCEPTIONS = True


SPECTACULAR_SETTINGS = {
    'TITLE': 'Tick Tack Go',
    'DESCRIPTION': 'Our Task Management API Documentation',
    'VERSION': '1.0.0',

    'EXCLUDE_PATH': [r'^auth/']
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE' , 'django.db.backends.mysql'), 
        'NAME': os.getenv('DATABASE_NAME' , Path(__file__).resolve().parent.name),
        'USER': os.getenv('DATABASE_USER' , 'root'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD' , ''),
        'HOST': os.getenv('DATABASE_HOST' , 'localhost'),   # Or an IP Address that your DB is hosted on
        'PORT': os.getenv('DATABASE_PORT' , '3306'),
        "OPTIONS": {
            "init_command": "SET default_storage_engine=INNODB",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.User'


AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',  # Google
    'django.contrib.auth.backends.ModelBackend',  # Default
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.getenv('TIME_ZONE' , '')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
DATA_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 100  # 100MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 100  # 100MB


# CONSTANTS
MAX_FILE_SIZE = 1024 * 1024 * 100 # 100MB 
MAX_WORKSPACES_COUNT_FOR_SINGLE_USER = 10
MAX_MEMBERS_COUNT_FOR_SINGLE_WORKSPACE = 20

    # -Points
        # priority
HIGH_PRIORITY_MISSION = 10
MEDIUM_PRIORITY_MISSION = 8
LOW_PRIORITY_MISSION = 6
        # time
FINISHED_BEFORE_TIME = 10
FINISHED_ON_TIME = 8
FINISHED_AFTER_TIME = 5
        # task_long
DAY_POINTS = 1

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com' 
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')


CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
    }
}

CELERY_BROKER_URL = "redis://127.0.0.1:6379/1"
CELERY_RESULT_BACKEND = "redis://127.0.0.1:6379/1"
CELERY_WORKER_POOL = 'solo'


# Third Party Credentials
# Google OAuth2 credentials (from Google Cloud Console)
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY' , '')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET' , '')


#firebase notification
# Firebase settings
FIREBASE_CONFIG = os.getenv('FIREBASE_CONFIG')

SERVICE_ACCOUNT_FILE = os.getenv('SERVICE_ACCOUNT_FILE')